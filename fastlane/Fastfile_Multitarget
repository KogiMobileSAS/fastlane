
############################ BEFORE ############################
before_all do
	begin
	    # Ensure that there are no changes in the branch
	    ensure_git_status_clean

	    if is_ci?
	    cocoapods
    	    end
	rescue
	    # In case the repository is not clean, raise an exception to which we can compare in the error lane
	    UI.user_error!("Git repository is dirty")
  	end
end

######################### PUBLIC LANES #########################
platform :ios do
	desc "Increment the build number and commit the build bump"
	lane :increment_build do |options|
		# Get parameters
		build_number = options[:build_number]
		xcodeproj = options[:xcodeproj]
		# Increment build
		increment_build_number(build_number: build_number, xcodeproj: xcodeproj)
		# Commit the build bump
		version = get_version_number
		build = get_build_number
		commit_version_bump(message: "[chore]: Build bump: Version: #{version}, Build: #{build}")
	end

	desc "Increment the version number, reset the build number and commit the version bump"
	lane :increment_version do |options|
		# Get parameters
		bump_type = options[:bump_type]
		version_number = options[:version_number]
		xcodeproj = options[:xcodeproj]
		# Increment version and reset build
		increment_version_number(bump_type: bump_type, version_number: version_number, xcodeproj: xcodeproj)
		increment_build_number(build_number: 1)
		# Commit the version bump
		version = get_version_number
		build = get_build_number
		commit_version_bump(message: "[chore]: Version bump: Version: #{version}, Build: #{build}")
	end

	desc "Creates a new build, uploads it to iTunes Connect and sends a notification after the upload and when iTunes Connect finishes processing the build"
  	lane :store_upload do
	    # Build and package the app
	    gym(scheme:scheme,configuration: "Release", export_method: "app-store")
	    # Upload to TestFlight
	    pilot(skip_submission: true, skip_waiting_for_build_processing: true)
	    # Wait for iTunes Connect to finish processing the build
	    sh "watchbuild"
	end
end

######################### PRIVATE LANES #########################
# This lane creates new builds and uploads them to Fabric
# It needs 3 variales which are:
# - configuration: This is the configuration you have configured in your Xcode project, e.g., Release, AdHoc, etc.
# - environment: This is the environment that the app is using, e.g., Development, Test, Production.
# - groups: This are the names of the groups in Fabric to which you want to send the build, e.g., Kogi.
private_lane :fabric do |options|
    # Get parameters
    if is_ci?
      unlock_keychain
    end
    configuration = options[:configuration]
    environment = options[:environment]
    groups = options[:groups]
    scheme = options[:scheme]
    exportMethod = options[:export_method]

    # Update the app's icon to have the version and build
    build = get_build_number
    version = get_version_number
 #   badge(shield: "#{environment}-V#{version}(#{build})-blue")

    # Build and package the app
    gym(scheme:scheme,configuration: configuration,export_method: exportMethod)

    # Upload to crashlytics
    crashlytics(notes: environment.upcase, groups: groups)
end

# This lane creates new builds and uploads them to TestFlight
# It needs 2 variales which are:
# - configuration: This is the configuration you have configured in your Xcode project, e.g., Release, AdHoc, etc.
# - environment: This is the environment that the app is using, e.g., Development, Test, Production.
private_lane :itunesconnect do |options|
    # Get parameters
    configuration = options[:configuration]
    environment = options[:environment]
    scheme = option[:scheme]
    exportMethod = options[:export_method]

    # Update the app's icon to have the version and build
    build = get_build_number
    version = get_version_number
   # badge(shield: "#{environment}-V#{version}(#{build})-blue")

    # Build and package the app
    gym(scheme:scheme,configuration: configuration,export_method: exportMethod)

    # Upload to TestFlight
    pilot(skip_submission: true,skip_waiting_for_build_processing:true)
end


# This lane is to increment scheme's build
# It needs 1 variale:
# - scheme: This is the scheme that need the build increment
# use: buildIncrementOf(scheme: "name")  

private_lane :buildIncrementOf do |options|
	# Get parameters
    xcodeproj = options[:xcodeproj]
    currentScheme =  options[:scheme]
    # Update build
    version = get_version_number_from_plist(scheme: currentScheme)
    build = get_build_number_from_plist(scheme: currentScheme).to_i + 1
             
      increment_build_number_in_plist(
        build_number: build.to_s,
        scheme: currentScheme
      )

      commit_version_bump(message: "[chore]: Build increment #{currentScheme} Build bump: Version: #{version}, Build: #{build}",xcodeproj: xcodeproj)
end


############################ AFTER ############################
after_all do |lane|
    # Clean the repo to remove the modified icons with the version and build
    # reset_git_repo(skip_clean: true, force: true)
end

error do |lane, exception|
	# Check that the exeption is not because the git repository is dirty so we don't delete the changes that we forgot to commit
	if exception.message != "Git repository is dirty"
	    # Clean the repo to remove the modified icons with the version and build
	    reset_git_repo(skip_clean: true, force: true)
  	end
end
